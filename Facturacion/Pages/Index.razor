@page "/"
@using Blazorise
@using Facturacion.Data.Models
@using Facturacion.Data.Models
@using Microsoft.AspNetCore.Mvc
@using System.Text
@using global::Serilog

@inject ClientService ClientService
@inject TiposFiscalService TiposFiscalService
@inject MonedaService MonedaService
@inject FacturableService FacturableService
@inject DiasCreditoService DiasCreditoService
@inject FacturaHService FacturaHService
@inject FacturaDService FacturaDService
@inject IMessageService MessageService

<PageTitle>Facturacion</PageTitle>

@if (IsLoading)
{
    <div class="center_item">
        <SpinKit Type="SpinKitType.Chase" Color="#314b97" Size="48px" />
    </div>
}
else
{
    <Modal @ref="modalRef">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Agregar Producto...</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Id</FieldLabel>
                    <TextEdit @bind-Text="@IdFacturable" @onfocusout="() => GetFacturableName()" />
                </Field>
                <Field>
                    <FieldLabel>Producto</FieldLabel>
                    <TextEdit @bind-Text="@FacturableNombre" />
                </Field>
                <Field>
                    <FieldLabel>Cantidad</FieldLabel>
                    <TextEdit @bind-Text="@FacturableCantidad" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Size="Size.Small" Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Size="Size.Small" Color="Color.Danger" Clicked="@SaveModal">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
    <div class="body-form">
        <div class="form-container">
            <div class="title">Facturación</div>
            <EditForm Model="@FacturaFinal">
                <DataAnnotationsValidator />
                <div class="user-details">
                    <div class="box">
                        <div class="input-box">
                            <span class="details"> Cliente </span>
                            <!--ID clientes-->
                        <input type="number" list="idCliente" @bind="@IdCliente" @onfocusout="() => GetClientName()" />
                            <datalist id="idCliente">
                                @if (listaCliente != null)
                                {
                                    foreach (Cliente cliente in listaCliente)
                                    {
                                        <option value="@cliente.IdCliente">@cliente.Nombre</option>
                                    }
                                }
                            </datalist>
                        </div>
                        <div class="input-box">
                            <span class="details">Nombre del cliente</span>
                            <!--Nombre cliente-->
                            @if (IdCliente == 0)
                            {
                                Nombre = "Consumidor Final";
                                <input type="text" @bind="@Nombre" />
                            }
                            else
                            {
                                <input disabled type="text" @bind="@Nombre" />
                            }
                        </div>
                        <div class="input-box">
                            <span class="details"> Tipo de Comprobante </span>
                            <!--Tipo de comprobante-->
                        <select @bind="@IdTipoFiscal">
                                @if (listaTipoFactura != null)
                                {
                                    foreach (TiposFiscal fiscal in listaTipoFactura)
                                    {
                                        <option value="@fiscal.IdTipoFiscal">@fiscal.TipoFiscal</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="input-box">
                            <span class="details"> Secuencia Fiscal </span>
                            <!--Secuencia fiscal-->
                        <input type="text" @bind="@SecFiscal" />
                        </div>
                    </div>
                    <div class="box">
                        <div class="input-box">
                            <!-- Fecha factura -->
                        <span class="details"> Fecha factura </span>
                            @{
                                string min = string.Format("{0}-{1}-{2}", DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                            }
                            <input class="input-date" type="date" min="@min" @bind="@FechaGenerada" />
                        </div>
                        <div class="input-box">
                            <!-- Tipo de moneda -->
                        <span class="details"> Moneda </span>
                            <select @bind="@IdMoneda">
                                @if (listaMoneda != null)
                                {
                                    foreach (Moneda moneda in listaMoneda)
                                    {
                                        <option value="@moneda.IdMoneda">@moneda.Moneda1</option>
                                    }
                                }
                            </select>
                        </div>
                        @if (IdTipoFiscal == 2)
                        {
                            <div class="input-box">
                                <!-- Metodo de pago -->
                        <span class="details"> Metodo de Pago </span>
                                <select>
                                    <option value="1" selected>Efectivo</option>
                                    <option value="2">Tarjeta</option>
                                </select>
                            </div>
                        }
                        @if (IdTipoFiscal == 1 || IdTipoFiscal == 4 || IdTipoFiscal == 5 || IdTipoFiscal == 6)
                        {
                            <div class="input-box">
                                <!-- Dias credito -->
                        <span class="details"> Dias credito </span>
                                <select @bind="@IdDiasCredito">
                                    @if (listaDiasCredito != null)
                                    {
                                        foreach (DiasCredito credito in listaDiasCredito)
                                        {
                                            <option value="@credito.IdDiasCredito">@credito.Descripcion</option>
                                        }
                                    }
                                </select>
                            </div>
                        }
                    </div>
                </div>
                <!-- Agregar Facturables-->
                <div class="button">
                    <button @onclick="() => ShowModal()">Agregar</button>
                </div>
                <div class="facturables">
                    <table>
                        <thead>
                            <tr role="row" class="unselectable th-index-style">
                                <th rowspan="1" colspan="1"> ID</th>
                                <th rowspan="1" colspan="1"> Producto</th>
                                <th rowspan="1" colspan="1"> Precio</th>
                                <th rowspan="1" colspan="1"> Cantidad</th>
                                <th rowspan="1" colspan="1"> Monto</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (listaFacturable != null)
                            {
                                foreach (ProductoFacturar? producto in listaProductos)
                                {
                                    <tr>
                                        <td>@producto.Facturable.IdFacturable</td>
                                        <td>@producto.Facturable.NombreEsp</td>
                                        <td>@(string.Format("{0:C}", producto.Precio))</td>
                                        <td>@producto.Cantidad</td>
                                        <td>@(string.Format("{0:C}",producto.PrecioFinal))</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <div class="box-result">
                        <span>Total:</span>
                        <span class="precio">@(string.Format("{0:C}",PrecioFinal))</span>
                    </div>
                </div>
                <hr />
                <div class="button">
                    <button type="submit" @onmousedown="() => HandleValidConfirm()">Confirmar</button>
                    @if (Facturando)
                    {
                        if (IsSuccess)
                        {
                            ShowSuccessMessage();
                        }
                        else
                        {
                            ShowErrorMessage();
                        }
                    }
                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    // Campos del index
    private bool IsLoading { get; set; } = true;
    private bool Facturando { get; set; }
    private bool IsSuccess { get; set; }

    // Campos
    private int FacturaHNoFact { get; set; }
    private int FacturaDRno { get; set; }
    private Modal modalRef { get; set; } = new();
    private Cliente? clienteActual { get; set; } = null!;
    private Facturable? facturableActual { get; set; } = null!;
    private Moneda? monedaActual { get; set; } = null!;
    private Factura? FacturaFinal { get; set; } = new();
    private decimal PrecioFinal { get; set; } = 0.0m;

    // Propiedades Formulario
    [BindProperty]
    public short? IdCliente { get; private set; } = null!;
    [BindProperty]
    public string Nombre { get; private set; } = "";
    [BindProperty]
    public byte IdMoneda { get; private set; }
    [BindProperty]
    public DateTime FechaGenerada { get; private set; } = DateTime.Now;
    [BindProperty]
    public byte IdTipoFiscal { get; private set; }
    [BindProperty]
    public string SecFiscal { get; private set; } = "";
    [BindProperty]
    public byte IdDiasCredito { get; private set; }

    // Propiedades Modals
    public string IdFacturable { get; private set; } = "";
    public string FacturableNombre { get; private set; } = "";
    public string FacturableCantidad { get; private set; } = "";

    // Listas
    public List<Cliente>? listaCliente { get; private set; } = null!;
    public List<TiposFiscal>? listaTipoFactura { get; private set; } = null!;
    public List<Moneda>? listaMoneda { get; private set; } = null!;
    public List<DiasCredito>? listaDiasCredito { get; private set; } = null!;
    public List<Facturable>? listaFacturable { get; private set; } = null!;
    public List<ProductoFacturar>? listaProductos { get; private set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await Initializing();
        IsLoading = false;
        Facturando = false;
    }

    private async Task HandleValidConfirm()
    {
        List<FacturasD> facturasD = new();

        try
        {
            //if (listaProductos.Count == 0)
            //{
            //    return;
            //}
            //FacturasH facturaH = new()
            //    {
            //        NoFact = FacturaHNoFact + 1,
            //        FechaGen = FechaGenerada,
            //        Fecha = DateTime.Now,
            //        IdCliente = (IdCliente == null ? (short)0 : (short)IdCliente),
            //        Monto = PrecioFinal,
            //        SecFiscal = SecFiscal,
            //        Pagada = (IdTipoFiscal == 2 ? true : false),
            //        IdTipoFiscal = IdTipoFiscal

            //    };
            //// Save into db FacturaH
            //await FacturaHService.Add(facturaH);

            //FacturasD facturaD = new();
            //foreach (ProductoFacturar producto in listaProductos)
            //{
            //    facturaD = new()
            //        {
            //            Rno = FacturaDRno,
            //            NoFact = facturaH.NoFact,
            //            IdFacturable = producto.Facturable.IdFacturable,
            //            IdTipoFacturable = producto.Facturable.IdTipoFactuable,
            //            NombreEsp = producto.Facturable.NombreEsp,
            //            NombreEng = Encoding.ASCII.GetBytes(producto.Facturable.NombreIng),
            //            PrecioRd = producto.Precio,
            //            Cantidad = producto.Cantidad
            //        };

            //    // Save into db FacturaD
            //    await FacturaDService.Add(facturaD);
            //    facturasD.Add(facturaD);
            //}

            //FacturaFinal = new()
            //{
            //    FacturaH = facturaH,
            //    FacturasD = facturasD
            //};

            Facturando = true;
            IsSuccess = true;
            await Task.Delay(1000);
            Facturando = false;
        }
        catch (Exception ex)
        {
            Facturando = true;
            IsSuccess = false;
            await Task.Delay(1000);
            Facturando = false;

            Log.Logger.Warning(ex.Message);
        }
    }

    private Task ShowModal() => modalRef.Show();

    private Task HideModal() => modalRef.Hide();

    private Task SaveModal()
    {
        AddItem().Wait();
        IdFacturable = "";
        FacturableNombre = "";
        FacturableCantidad = "";
        return modalRef.Close(CloseReason.UserClosing);
    }

    private async Task AddItem()
    {
        await SetValues();

        if (!string.IsNullOrEmpty(FacturableCantidad) && byte.Parse(FacturableCantidad) > 0 && byte.Parse(FacturableCantidad) < byte.MaxValue)
        {
            byte cantidad = byte.Parse(FacturableCantidad);

            ProductoFacturar producto = new()
                {
                    Facturable = facturableActual,
                    Cantidad = cantidad,
                    Precio = facturableActual.Precio1,
                };
            PrecioFinal += producto.PrecioFinal;

            listaProductos.Add(producto);
        }
    }

    private void RemoveItem()
    {
        // TODO: Remover articulos de la lista agregada.
    }

    private async Task SetValues()
    {
        if (IdMoneda > 0 && listaMoneda != null && listaMoneda.ElementAtOrDefault((int)IdMoneda) != null)
        {
            monedaActual = listaMoneda[(int)IdMoneda - 1];
        }
        FacturaHNoFact = await FacturaHService.GetLastNoFact();
        FacturaDRno = await FacturaDService.GetLastRno();
    }

    private Task GetClientName()
    {
        if (IdCliente > 0 && listaCliente != null && listaCliente.ElementAtOrDefault((int)IdCliente) != null)
        {
            Nombre = listaCliente[(int)IdCliente - 1].Nombre;
        }

        return Task.CompletedTask;
    }

    private Task GetFacturableName()
    {
        if (!string.IsNullOrEmpty(IdFacturable) && short.Parse(IdFacturable) > 0 && listaFacturable != null)
        {
            int id = (int)short.Parse(IdFacturable);

            if (listaFacturable.ElementAtOrDefault(id) != null)
            {
                facturableActual = listaFacturable[id - 1];
                if (facturableActual != null)
                {
                    FacturableNombre = facturableActual.NombreEsp;
                }
            }
        }

        return Task.CompletedTask;
    }

    private Task ShowSuccessMessage() => MessageService.Success("Factura Generada exitosamente!", "Success");

    private Task ShowErrorMessage() => MessageService.Error("No se pudo guardar la factura, compruebe todos los campos.", "Error");

    private async Task Initializing()
    {
        listaCliente = await ClientService.GetAllAsync();
        listaTipoFactura = await TiposFiscalService.GetAllAsync();
        listaMoneda = await MonedaService.GetAllAsync();
        listaFacturable = await FacturableService.GetAllAsync();
        listaDiasCredito = await DiasCreditoService.GetAllAsync();
        listaProductos = new();
    }
}